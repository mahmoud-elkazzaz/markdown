{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","editorIcon","setEditorIcon","previewerIcon","setPreviewerIcon","editorCheck","setEditorCheck","previewerCheck","setPreviewerCheck","editorCard","useRef","previewerCard","editorInput","previewerInput","editorText","previewerText","id","ref","className","onClick","current","style","height","display","rows","cols","value","onChange","e","target","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NA+EeA,MAtEf,WACE,IADa,EAEWC,mBADJ,kNADP,mBAENC,EAFM,KAEAC,EAFA,OAGuBF,mBAAS,cAAC,IAAD,KAHhC,mBAGNG,EAHM,KAGMC,EAHN,OAI6BJ,mBAAS,cAAC,IAAD,KAJtC,mBAINK,EAJM,KAISC,EAJT,OAKyBN,oBAAS,GALlC,mBAKNO,EALM,KAKOC,EALP,OAM+BR,oBAAS,GANxC,mBAMNS,EANM,KAMUC,EANV,KAOPC,EAAaC,mBACbC,EAAgBD,mBAChBE,EAAcF,mBACdG,EAAiBH,mBACjBI,EAAaJ,mBACbK,EAAgBL,mBAgCtB,OACE,sBAAKM,GAAG,YAAR,UACE,qBAAKC,IAAKR,EAAYO,GAAG,SAAzB,SACI,eAAC,IAAD,CAAME,UAAU,OAAhB,UACE,eAAC,IAAD,CAAYA,UAAU,SAAtB,mBAEA,sBAAMC,QAlCW,WACrBd,GAKFS,EAAWM,QAAQC,MAAMC,OAAS,QAClCX,EAAcS,QAAQC,MAAME,QAAU,QACtCrB,EAAc,cAAC,IAAD,OANhBY,EAAWM,QAAQC,MAAMC,OAAS,OAClCX,EAAcS,QAAQC,MAAME,QAAU,OACtCrB,EAAc,cAAC,IAAD,MAOdI,GAAgBD,IAuB2Ba,UAAU,OAAOD,IAAKL,EAAzD,SAAuEX,OAErE,0BAAUgB,IAAKH,EAAYI,UAAU,YAAYF,GAAG,cAAcQ,KAAK,IAAIC,KAAK,KAAKC,MAAO3B,EAAM4B,SAtC3F,SAACC,GAAD,OAAO5B,EAAQ4B,EAAEC,OAAOH,eAyCvC,qBAAKT,IAAKN,EAAeK,GAAG,YAA5B,SACE,eAAC,IAAD,CAAME,UAAU,OAAhB,UACE,eAAC,IAAD,CAAYA,UAAU,SAAtB,sBAEE,sBAAMC,QA7Bc,WACxBZ,GAKFQ,EAAcK,QAAQC,MAAMS,UAAY,OACxCrB,EAAWW,QAAQC,MAAME,QAAU,QACnCnB,EAAiB,cAAC,IAAD,OANjBW,EAAcK,QAAQC,MAAMS,UAAY,QACxCrB,EAAWW,QAAQC,MAAME,QAAU,OACnCnB,EAAiB,cAAC,IAAD,MAOnBI,GAAmBD,IAkB2BW,UAAU,OAAOD,IAAKJ,EAA5D,SAA6EV,OAE/E,qBAAKc,IAAKF,EAAeC,GAAG,WAAWE,UAAU,YAAjD,SACE,cAAC,IAAD,UAAWnB,eC3DRgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9e3fc42e.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Card, CardHeader, CardBody } from 'react-simple-card';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport { FaExpandArrowsAlt, FaCompressArrowsAlt } from 'react-icons/fa';\nimport Markdown from 'markdown-to-jsx';\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm';\n\nfunction App() {\n  const initialText = \"![ReactJS Logo](https://res.cloudinary.com/practicaldev/image/fetch/s--54ca_F2q--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/i/1wwdyw5de8avrdkgtz5n.png)\"\n  const [text, setText] = useState(initialText)\n  const [editorIcon, setEditorIcon] = useState(<FaExpandArrowsAlt />)\n  const [previewerIcon, setPreviewerIcon] = useState(<FaExpandArrowsAlt />)\n  const [editorCheck, setEditorCheck] = useState(false)\n  const [previewerCheck, setPreviewerCheck] = useState(false)\n  const editorCard = useRef();\n  const previewerCard = useRef();\n  const editorInput = useRef();\n  const previewerInput = useRef();\n  const editorText = useRef();\n  const previewerText = useRef();\n\n  const textChange = (e) => setText(e.target.value)\n  \n  const handleEditorResize = () => {\n    if(!editorCheck) {\n    editorText.current.style.height = \"70vh\"\n    previewerCard.current.style.display = \"none\"\n    setEditorIcon(<FaCompressArrowsAlt />)\n    } else {\n      editorText.current.style.height = \"100px\"\n      previewerCard.current.style.display = \"block\"\n      setEditorIcon(<FaExpandArrowsAlt />)\n    }\n\n    setEditorCheck(!editorCheck)\n  }\n\n  const handlePreviewerResize = () => {\n    if(!previewerCheck) {\n      previewerText.current.style.minHeight = \"100vh\"\n      editorCard.current.style.display = \"none\"\n      setPreviewerIcon(<FaCompressArrowsAlt />)\n    } else {\n      previewerText.current.style.minHeight = \"20vh\"\n      editorCard.current.style.display = \"block\"\n      setPreviewerIcon(<FaExpandArrowsAlt />)\n    }\n\n    setPreviewerCheck(!previewerCheck)\n  }\n  \n  return(\n    <div id=\"container\">\n      <div ref={editorCard} id=\"editor\">\n          <Card className=\"card\">\n            <CardHeader className=\"header\">\n              Editor\n            <span onClick={handleEditorResize} className=\"icon\" ref={editorInput}>{editorIcon}</span>\n            </CardHeader>\n              <textarea ref={editorText} className=\"text-area\" id=\"editor-text\" rows=\"5\" cols=\"75\" value={text} onChange={textChange} />\n          </Card>\n      </div>\n      <div ref={previewerCard} id=\"previewer\">\n        <Card className=\"card\">\n          <CardHeader className=\"header\">\n            Previewer\n            <span onClick={handlePreviewerResize} className=\"icon\" ref={previewerInput}>{previewerIcon}</span>\n           </CardHeader>\n          <div ref={previewerText} id=\"markdown\" className=\"text-area\" >\n            <Markdown>{text}</Markdown>\n          </div>\n        </Card>\n      </div>\n    </div>  \n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}